// @ts-nocheck
import firebase from 'firebase';
import React, { Component } from 'react';
import { Button, Form, Modal, Badge } from 'react-bootstrap';
import { FaRegSmileWink, FaPlus } from 'react-icons/fa';
import { connect } from 'react-redux';
import {
  setCurrentChatRoom,
  setPrivateChatRoom,
} from '../../../redux/actions/chatRoom_action';
export class ChatRooms extends Component {
  state = {
    show: false,
    name: '',
    description: '',
    chatRoomsRef: firebase.database().ref('chatRooms'),
    messagesRef: firebase.database().ref('messages'),
    chatRooms: [],
    firstLoad: true,
    activeChatRoomId: '',
    notifications: [],
  };

  componentDidMount() {
    this.addChatRoomsListeners();
  }

  componentWillUnmount() {
    this.state.chatRoomsRef.off(); // 컴포넌트 언마운트 직전에 데이터베이스 이벤트 리스너 제거
  }

  setFirstChatRoom = () => {
    const firstChatRoom = this.state.chatRooms[0];
    if (this.state.firstLoad && this.state.chatRooms.length > 0) {
      this.props.dispatch(setCurrentChatRoom(firstChatRoom));
      this.setState({ activeChatRoomId: firstChatRoom.id });
    }
    this.setState({ firstLoad: false });
  };

  // 채팅방 생성할 때 리스너 생성, 스냅샷안에서
  addChatRoomsListeners = () => {
    let chatRoomsArray = [];
    this.state.chatRoomsRef.on('child_added', DataSnapshot => {
      chatRoomsArray.push(DataSnapshot.val());
      this.setState({ chatRooms: chatRoomsArray }, () =>
        this.setFirstChatRoom(),
      );
      this.addNotificationListener(DataSnapshot.key); // 채팅방 아이디
    });
  };

  addNotificationListener = chatRoomId => {
    this.state.messagesRef
      .child(`${chatRoomId}/message`)
      .on('value', DataSnapshot => {
        if (this.props.chatRoom) {
          this.handleNotification(
            chatRoomId,
            this.props.chatRoom.id,
            this.state.notifications,
            DataSnapshot,
          );
        }
      });
  };
  handleNotification = (
    chatRoomId,
    currentChatRoomId,
    notifications,
    DataSnapshot,
  ) => {
    let lastTotal = 0;
    // 이미 notifications state 안에 정보가 있는 채팅방과 그렇지 않은 채팅방 구분해야함
    let index =
      notifications &&
      notifications.findIndex(notification => notification.id === chatRoomId);

    // notifications state 안에 해당 채팅방의 알림 정보가 없을 때
    if (index === -1) {
      notifications.push({
        id: chatRoomId,
        total: DataSnapshot.numChildren(),
        lastKnownTotal: DataSnapshot.numChildren(),
        count: 0,
      });
    }
    // notifications state 안에 해당 채팅방의 알림 정보가 이미 있을 떄
    else {
      // 같은 채팅방이 아닐 때
      if (currentChatRoomId !== chatRoomId) {
        lastTotal = notifications[index].lastKnownTotal;

        // 총 메시지 갯수 - 마지막 확인한 총 메세지 갯수 = count
        if (DataSnapshot.numChildren() - lastTotal > 0) {
          notifications[index].count = DataSnapshot.numChildren() - lastTotal;
        }
      }
      notifications[index].total = DataSnapshot.numChildren();
    }
    this.setState({ notifications });
  };

  handleClose = () => this.setState({ show: false });
  handleShow = () => this.setState({ show: true });
  handleSubmit = e => {
    e.preventDefault();
    const { name, description } = this.state;
    if (this.isFormValid(name, description)) {
      this.addChatRoom();
    }
  };

  isFormValid = (name, description) => name && description;

  addChatRoom = async () => {
    const key = this.state.chatRoomsRef.push().key; //push autogenerated 유니크 키를 생성하고 .key 프로퍼티로 가져옴
    const { name, description } = this.state;
    const { user } = this.props; // class component라서 useSelector 를 사용하지 못하고 props으로 스토어에 접근
    const newChatRoom = {
      id: key,
      name: name,
      description: description,
      createdBy: {
        name: user.displayName,
        image: user.photoURL,
      },
    };

    try {
      await this.state.chatRoomsRef.child(key).update(newChatRoom);
      this.setState({
        name: '',
        description: '',
        show: false,
      });
    } catch (error) {
      alert(error);
    }
  };

  getNotificationCount = room => {
    let count = 0;
    this.state.notifications.forEach(notification => {
      if (notification.id === room.id) {
        count = notification.count;
      }
    });
    if (count > 0) return count;
  };

  renderChatRooms = chatRooms =>
    chatRooms?.map(room => (
      <li
        key={room.id}
        style={{
          backgroundColor:
            room.id === this.state.activeChatRoomId && '#ffffff45',
        }}
        onClick={() => this.changeChatRoom(room)}
      >
        # {room.name}
        <Badge style={{ float: 'right', marginTop: '2.5px' }} variant='danger'>
          {this.getNotificationCount(room)}
        </Badge>
      </li>
    ));

  changeChatRoom = room => {
    this.props.dispatch(setCurrentChatRoom(room));
    this.setState({ activeChatRoomId: room.id });
    this.props.dispatch(setPrivateChatRoom(false));
    let index = this.state.notifications.findIndex(
      notification => notification.id === room.id,
    );
    const newNotifications = [...this.state.notifications];
    const { id, total, lastKnownTotal, count } = this.state.notifications[
      index
    ];
    console.log(id, total, lastKnownTotal, count);

    newNotifications[index] = {
      id: id,
      total: total,
      lastKnownTotal: total,
      count: 0,
    };
    this.setState({ notifications: newNotifications });
  };

  render() {
    return (
      <div>
        <div
          style={{
            position: 'relative',
            width: '100%',
            display: 'flex',
            alignItems: 'center',
          }}
        >
          <FaRegSmileWink style={{ marginRight: 3 }} />
          공개 채팅방{''} (1)
          <FaPlus
            onClick={this.handleShow}
            style={{ position: 'absolute', right: 0, cursor: 'pointer' }}
          />
        </div>
        <ul style={{ listStyleType: 'none', padding: 0 }}>
          {this.renderChatRooms(this.state.chatRooms)}
        </ul>

        {/* Add Chat Room Modal */}

        <Modal show={this.state.show} onHide={this.handleClose}>
          <Modal.Header closeButton>
            <Modal.Title>새 채팅방 생성하기</Modal.Title>
          </Modal.Header>
          <Modal.Body>
            <Form onSubmit={this.handleSubmit}>
              <Form.Group controlId='formBasicEmail'>
                <Form.Label>채팅방 이름</Form.Label>
                <Form.Control
                  type='text'
                  placeholder='채팅방 이름을 입력해주세요'
                  onChange={e => this.setState({ name: e.target.value })}
                />
              </Form.Group>

              <Form.Group controlId='formBasicPassword'>
                <Form.Label>채팅방 설명</Form.Label>
                <Form.Control
                  type='text'
                  placeholder='채팅방 설명을 입력해주세요'
                  onChange={e => this.setState({ description: e.target.value })}
                />
              </Form.Group>
            </Form>
          </Modal.Body>
          <Modal.Footer>
            <Button variant='secondary' onClick={this.handleClose}>
              취소
            </Button>
            <Button variant='primary' onClick={this.handleSubmit}>
              채팅방 생성
            </Button>
          </Modal.Footer>
        </Modal>
      </div>
    );
  }
}
const mapStateToProps = state => {
  return {
    user: state.user.currentUser,
    chatRoom: state.chatRoom.currentChatRoom,
  };
};

export default connect(mapStateToProps)(ChatRooms);
