// @ts-nocheck
import firebase from 'firebase';
import React, { Component } from 'react';
import { Button, Form, Modal } from 'react-bootstrap';
import { FaRegSmileWink, FaPlus } from 'react-icons/fa';
import { connect } from 'react-redux';
export class ChatRooms extends Component {
  state = {
    show: false,
    name: '',
    description: '',
    chatRoomsRef: firebase.database().ref('chatRooms'),
  };

  componentDidMount() {
    this.AddChatRoomsListeners();
  }

  AddChatRoomsListeners = () => {
    let chatRoomsArray = [];
    this.state.chatRoomsRef.on('child_added', DataSnapshot => {
      chatRoomsArray.push(DataSnapshot.val());
      this.setState({ chatRooms: chatRoomsArray });
      console.log('등록', this.state.chatRooms);
    });
  };

  handleClose = () => this.setState({ show: false });
  handleShow = () => this.setState({ show: true });
  handleSubmit = e => {
    e.preventDefault();
    const { name, description } = this.state;
    if (this.isFormValid(name, description)) {
      this.addChatRoom();
    }
  };

  isFormValid = (name, description) => name && description;

  addChatRoom = async () => {
    const key = this.state.chatRoomsRef.push().key; //push autogenerated 유니크 키를 생성하고 .key 프로퍼티로 가져옴
    const { name, description } = this.state;
    const { user } = this.props; // class component라서 useSelector 를 사용하지 못하고 props으로 스토어에 접근
    const newChatRoom = {
      id: key,
      name: name,
      description: description,
      createdBy: {
        name: user.displayName,
        image: user.photoURL,
      },
    };

    try {
      await this.state.chatRoomsRef.child(key).update(newChatRoom);
      this.setState({
        name: '',
        description: '',
        show: false,
      });
    } catch (error) {
      alert(error);
    }
  };

  renderChatRooms = chatRooms =>
    chatRooms?.map(room => (
      <li
        key={room.id}
        style={{
          backgroundColor:
            room.id === this.state.activeChatRoomId && '#ffffff45',
        }}
        onClick={() => this.changeChatRoom(room)}
      >
        # {room.name}
      </li>
    ));

  render() {
    return (
      <div>
        <div
          style={{
            position: 'relative',
            width: '100%',
            display: 'flex',
            alignItems: 'center',
          }}
        >
          <FaRegSmileWink style={{ marginRight: 3 }} />
          CHAT ROOMS{''} (1)
          <FaPlus
            onClick={this.handleShow}
            style={{ position: 'absolute', right: 0, cursor: 'pointer' }}
          />
        </div>
        <ul style={{ listStyleType: 'none', padding: 0 }}>
          <li>테스트</li>
          {this.renderChatRooms(this.state.chatRooms)}
        </ul>

        {/* Add Chat Room Modal */}

        <Modal show={this.state.show} onHide={this.handleClose}>
          <Modal.Header closeButton>
            <Modal.Title>새 채팅방 생성하기</Modal.Title>
          </Modal.Header>
          <Modal.Body>
            <Form onSubmit={this.handleSubmit}>
              <Form.Group controlId='formBasicEmail'>
                <Form.Label>채팅방 이름</Form.Label>
                <Form.Control
                  type='text'
                  placeholder='채팅방 이름을 입력해주세요'
                  onChange={e => this.setState({ name: e.target.value })}
                />
              </Form.Group>

              <Form.Group controlId='formBasicPassword'>
                <Form.Label>채팅방 설명</Form.Label>
                <Form.Control
                  type='text'
                  placeholder='채팅방 설명을 입력해주세요'
                  onChange={e => this.setState({ description: e.target.value })}
                />
              </Form.Group>
            </Form>
          </Modal.Body>
          <Modal.Footer>
            <Button variant='secondary' onClick={this.handleClose}>
              취소
            </Button>
            <Button variant='primary' onClick={this.handleSubmit}>
              채팅방 생성
            </Button>
          </Modal.Footer>
        </Modal>
      </div>
    );
  }
}
const mapStateToProps = state => {
  return {
    user: state.user.currentUser,
  };
};

export default connect(mapStateToProps)(ChatRooms);
